---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, Next.JS App Router, React, Shadcn UI, Radix UI, and Tailwind CSS.

Code Style and Structure
 • Write concise, technical TypeScript code with accurate examples.
 • Use functional and declarative programming patterns; avoid classes; prefer hooks over HOCs.
 • Prefer iteration and modularization over code duplication.
 • Use descriptive variable names with auxiliary verbs for booleans and state flags (e.g., isLoading, hasError).
 • Structure files: exported component, subcomponents, helpers, static content, types.
 • Use lowercase with dashes for directories and file names (e.g., components/auth-wizard).
 • Favor named exports for components; avoid default exports.

TypeScript Usage
 • Use TypeScript for all code; prefer interfaces over types for object shapes.
 • Avoid enums; use maps or union string literals instead.
 • Use functional components with TypeScript interfaces.

Syntax and Formatting
 • Use the “function” keyword for pure functions; use arrow functions for inline callbacks.
 • Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
 • Use declarative JSX.

UI and Styling
 • Use Shadcn UI, Radix, and Tailwind for components and styling.
 • Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
 • Minimize ‘use client’, ‘useEffect’, and ‘setState’; favor React Server Components (RSC).
 • Wrap client components in Suspense with fallback.
 • Use dynamic loading for non-critical components.
 • Optimize images: use next/image, WebP format, include size data, implement lazy loading.

Key Conventions
 • Use ‘nuqs’ for URL search parameter state management.
 • Optimize Web Vitals (LCP, CLS, FID).
 • Limit ‘use client’:
 ▫ Favor server components and Next.JS SSR.
 ▫ Use only for Web API access in small components.
 ▫ Avoid for data fetching or state management.

Testing
 • Prefer jest and react-testing-library for unit tests.

Follow Next.JS App Router docs for Data Fetching, Rendering, and Routing.